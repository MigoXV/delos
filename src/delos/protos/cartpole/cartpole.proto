syntax = "proto3";

// CartPole-v1 streaming control protocol (Python-focused)
// Bidirectional streaming: a client sends commands (reset/step/close)
// and receives environment results as a stream. No rendering.
//
// Generate Python code (requires grpcio-tools):
//   python -m grpc_tools.protoc -I . \
//       --python_out=. --pyi_out=. --grpc_python_out=. cartpole_stream.proto
//
// CartPole-v1 specifics:
//   - Observation shape: [4] (float32)
//   - Action space: Discrete{2} (0 = push left, 1 = push right)
//   - Gymnasium-style termination flags: terminated, truncated
//
package gym.cartpole.v1;

option optimize_for = SPEED;

// ----------------------------
// Service
// ----------------------------
service CartPoleService {
  // Bidirectional stream. The first message sent by the client SHOULD be a Reset.
  rpc EnvStream(stream EnvRequest) returns (stream EnvResponse);
}

// ----------------------------
// Requests (client -> server)
// ----------------------------
message EnvRequest {
  // Optional correlation id chosen by the client (echoed in responses)
  string request_id = 1;

  // Optional logical episode/session id to help clients correlate a run
  string episode_id = 2;

  // For future extensibility: clients may send a specific env_id; default is "CartPole-v1"
  string env_id = 3;

  oneof command {
    Reset reset = 10;
    Step step = 11;
    Close close = 12;
  }
}

message Reset {
  // Optional random seed for reproducibility
  int32 seed = 1;

  // If true, server should start a fresh episode even if one is already active
  bool force = 2;
}

message Step {
  // Discrete action for CartPole-v1: 0 or 1
  int32 action = 1;
  
  // Optional: max wall-clock milliseconds the server should spend on this step
  // (server MAY ignore)
  uint32 step_timeout_ms = 2;
}

message Close {
  // Optional reason sent by client
  string reason = 1;
}

// ----------------------------
// Responses (server -> client)
// ----------------------------
message EnvResponse {
  // Echoed from request when applicable
  string request_id = 1;
  string episode_id = 2;

  // Monotonic step index within the current episode; 0 right after Reset
  uint64 step_index = 3;

  // Server time in milliseconds since Unix epoch when this response was produced
  uint64 server_time_ms = 4;

  oneof event {
    ResetResult reset_result = 10;
    StepResult step_result = 11;
    Closed closed = 12;
    EnvError error = 13;
  }
}

message ResetResult {
  // Observation after reset; length is 4 for CartPole
  repeated float observation = 1;

  // Optional info key-values (flattened as strings for simplicity)
  map<string, string> info = 2;
}

message StepResult {
  // Observation after this step
  repeated float observation = 1;

  // Scalar reward from this step
  float reward = 2;

  // Gymnasium-style termination flags
  bool terminated = 3; // True if episode ended due to task success/failure
  bool truncated  = 4; // True if episode ended due to time or external limit

  // Optional info key-values (flattened as strings for simplicity)
  map<string, string> info = 5;
}

message Closed {
  // Human-readable message
  string message = 1;
}

message EnvError {
  // Canonical gRPC-like code (e.g., 3 = INVALID_ARGUMENT, 5 = NOT_FOUND, 13 = INTERNAL)
  int32 code = 1;
  string message = 2;
  // Optional details
  map<string, string> details = 3;
}
